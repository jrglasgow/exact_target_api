<?php
/**
 * @file
 * Main module for the ExactTarget API.  This file implements the public and
 * internal "private" functions used to wrap the ExactTarget XML API.
 */

/*
 * Start of Drupal hook implementations
 */

/**
 * Implements hook_menu().
 */
function exact_target_api_menu() {
  $items = array();

  $items['admin/config/system/exact-target-api'] = array(
    'title' => 'ExactTarget API',
    'description' => 'Configure integration with Exact Target API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exact_target_api_configure_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'exact_target_api.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Start of "private" utility functions for this module
 */

/**
 * Helper function to retrieve config info
 */
function _exact_target_api_get_config() {
  return variable_get('exact_target_api_cfg');
}

/**
 * Helper function to store config info
 */
function _exact_target_api_set_config($cfg) {
  $old_cfg = variable_get('exact_target_api_cfg', array());
  // if the Client Secret wasn't set don't overwrite the one we have stored
  $cfg['et_api_client_secret'] = $cfg['et_api_client_secret'] ?: $old_cfg['et_api_client_secret'];

  if (is_array($cfg)) {
    variable_set('exact_target_api_cfg', $cfg);
  }
}

/**
 * Start of public API methods
 */

/**
 * Retrieves profile and preference attributes defined in the ET account
 *
 * The Attributes (Account Info) Retrieve call retrieves the profile and
 * preference attributes defined in your account. The call requires no
 * additional input, and it returns the details of your attribute
 * definitions.
 * @see http://wiki.memberlandingpages.com/030_Developer_Documentation/040_XML_API/XML_API_Calls_and_Sample_Code/List_Management/Attributes_%28Account_Info%29_Retrieve
 * TODO update to FuelSDK
 * @see
 */
function exact_target_api_get_attributes() {
  $attrs = array();

  $data = _exact_target_api_call('accountinfo', 'retrieve_attrbs');
  if ($data) {
    // Make sure we have attributes
    if (!empty($data->system->profile->attribute)) {
      foreach ($data->system->profile->attribute as $attr) {
        // Extract the options before we flatten the object
        $attr_values = array();
        if (!empty($attr->values->value)) {
          foreach ($attr->values->value as $value) {
            $attr_values[] = (string) $value;
          }
        }
        // Flatten object to array, scrub data a bit before storing off
        $new_attr = get_object_vars($attr);
        if (!empty($attr_values)) {
          $new_attr['values'] = $attr_values;
        }
        $new_attr['hidden'] = (is_object($new_attr['display'])) ? TRUE : FALSE;
        $new_attr['min_size'] = (int) $new_attr['min_size'];
        $new_attr['max_size'] = (int) $new_attr['max_size'];

        // Anything else left as an object can be wiped out:
        foreach ($new_attr as $key => $val) {
          if (is_object($val)) {
            $new_attr[$key] = '';
          }
        }
        if ('Email Type' != $new_attr['name']) {
          $new_attr['fieldid'] = str_replace(' ', '__', $new_attr['name']);
        }
        else {
          $new_attr['fieldid'] = str_replace(' ', '', $new_attr['name']);
        }
        $attrs[$new_attr['fieldid']] = $new_attr;
      }
    }
  }

  return $attrs;
}

/**
 * Retrieves all groups in the ET account
 *
 * The List Retrieve Groups (All Groups) retrieves all groups in your
 * account. No additional input is required, and the call returns the ID,
 * name, description, and parent list ID of all groups in your account.
 * @see http://wiki.memberlandingpages.com/030_Developer_Documentation/040_XML_API/XML_API_Calls_and_Sample_Code/List_Management/List_Retrieve_Groups_%28All_Groups%29
 * TODO update to FuelSDK
 */
function exact_target_api_get_groups() {
  $groups = array();
  $params = array(
    'search_type' => 'groups',
  );

  $data = _exact_target_api_call('list', 'retrievegroups', $params);
  if ($data) {
    if (!empty($data->system->list->groups->group)) {
      foreach ($data->system->list->groups->group as $group) {
        $new_group = get_object_vars($group);
        $groups[$new_group['groupID']] = $new_group;
      }
    }
  }
  return $groups;
}

/**
 * Retrieves all lists for this account
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-retrieve.htm
 *
 * @param $props
 *  An array of properties to return, if empty all properties will be returned
 * @param $filter
 *  A filter to limit the number of lists to be returned. @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-retrieve.htm#filter-get-requests
 * @param $array_key
 *  A String representing a property of the list object. This is the key the
 *  array is keyed with. Caution, usage of some keys will cause data loss if
 *  more than one list share that key. defaults to "ID" which is the numeric
 *  unique ID of the list.
 * @return
 *  An array of list objects keyed by $array_key
 */
function exact_target_api_get_lists($props = array(), $filter = array(), $array_key = 'ID') {
  $client = exact_target_api_get_client();
  $list = new ET_List();
  $list->authStub = $client;

  if (!empty($props)) {
    $list->props = $props;
  }

  if (!empty($filter)) {
    $list->filter = $filter;
  }

  $response = $list->get();

  $old_lists = $response->results;
  $lists = array();
  foreach ($old_lists AS $this_list) {
    $lists[$this_list->{$array_key}] = $this_list;
  }

  return $lists;
}

/**
 * get an instance of the ET_Client with the current settings
 *
 * @return
 *  An ET_Client object with authentication tokens already set.
 */
function exact_target_api_get_client() {
  // WSDL and endpoint links are here https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/getting_started_developers_and_the_exacttarget_api.htm
  $cfg = _exact_target_api_get_config();
  $library = libraries_load('FuelSDK-PHP');
  $params = array(
    //'defaultwsdl' => $cfg[''],
    'clientid' => $cfg['et_api_client_id'],
    'clientsecret' => $cfg['et_api_client_secret'],
    //'appsignature' => $cfg[''],
    'xmlloc'  => 'https://webservice.' . $cfg['et_cfg_endpoint'] . '.exacttarget.com/etframework.wsdl',
  );
  $myclient = new ET_Client(FALSE, FALSE, $params);
  return $myclient;
}

/**
 * Retrieves list information for a given ID. If the items in in the db cache
 * (unexpired) it is retrieved from there, else it is retrieved from the remote
 * server, cached in the database, and returned
 *
 * @param $list
 *  This is the numeric ID of the list or the list object. If the list object is
 *  passed the object is cached in the database and the database timestamp for
 *  that object is updated. If the ID is passed the database is queried and if
 *  the list isn't cached or is expired it is fetched from the remote
 * @return
 *  the list object
 * @see exact_target_api_get_lists
 */
function exact_target_api_get_list_info($list) {
  $cfg = _exact_target_api_get_config();

  if (is_object($list)) {
    $listid = $list->ID;
  }
  else {
    $listid = $list;
  }
  static $cache = array();
  $listinfo = array();

  // Pre-pop our lookup cache for this page load from the DB
  if (empty($cache)) {
    $result = db_select('et_list_cache', 'et')
    ->fields('et')
    ->condition('update_timestamp', REQUEST_TIME - ($cfg['exact_target_list_cache_ttl'] ?: 86400),'>')
    ->execute()
    ->fetchAllAssoc('listid');

    if ($result) {
      foreach ($result as $record) {
        $cache[$record->listid] = unserialize($record->list_object);
      }
    }
  }

  // Now, let's see if we have a cached copy of the list info:
  if (!empty($cache[$listid])) {
    $listinfo = $cache[$listid];
  }

  // If not, retrieve the info and cache it in the DB
  else {
    if (!is_object($list)) {
      // the item passed in is not an object let's request this object from the
      // remote server to use and cache
      $filter = array(
        'Property' => 'ID',
        'SimpleOperator' => 'equals',
        'Value' => $listid
      );
      $requested_result = exact_target_api_get_lists(array(), $filter);
      if (!empty($requested_result[$listid])) {
        $list = $listinfo = $requested_result[$listid];
      }
    }

    if (is_object($list)) {
      if (!empty($list)) {

        // Store in DB:
         $query = db_merge('et_list_cache')
          ->key(array('listid' => $list->ID))
          ->fields(array(
            'list_name' => $list->ListName,
            'list_type' => $list->Type,
            'list_object' => serialize($list),
            'update_timestamp' => REQUEST_TIME,
          ))
          ->execute();

        // Store in static cache
        $cache[$listid] = $listinfo;
      }
    }
  }

  return $listinfo;
}

/**
 * Creates a new subscriber list
 *
 * The List Add call creates a new subscriber list. The call requires the
 * list name and type as input, and you receive the listID of the new list
 * as a result of the call. Once the list has been created, you can add
 * subscribers.
 *
 * @param $name
 *  String containing a title for the list
 * @param $description
 *  String containing the description of the list
 * @param $type
 *  String containing either 'Public' or 'Private'
 *Â @return
 *  ET_Post object containing status information including IDs for the newly
 *  created list
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-create.htm
 */
function exact_target_api_add_list($name, $description = 'SDK Created List', $type = 'Public') {
  $client = exact_target_api_get_client();
  $list = new ET_List();
  $list->authStub = $client;
  $list->props = array('ListName' => $name, 'Description' => $description, 'Type' => $type);
  $results = $list->post();

  return $results;
}

/**
 * Deletes a list and all subscribers who belong to that list
 *
 * @param
 *  String containing the Id of the list to delete
 * @return
 *  ET_Delete object containing results of delete action
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-delete.htm
 */
function exact_target_api_delete_list($listid) {
  $client = exact_target_api_get_client();
  $list = new ET_List();
  $list->authStub = $client;
  $list->props = array('ID' => $listid);
  $results = $list->delete();

  return $results;
}

/**
 * Renames a subscriber list
 *
 * @param $listid
 *  String containing the ID of the list
 * @param $name
 *  String containing the new name for the list
 * @return
 *  ET_Patch objectcontaining results of update action
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-update.htm
 */
function exact_target_api_rename_list($listid, $name) {
  $client = exact_target_api_get_client();
  $list = new ET_List();
  $list->authStub = $client;
  $list->props = array('ID' => $listid, 'ListName'=> $name);
  $results = $list->patch();

  return $results;
}

/**
 * Retrieves the profile and preference attributes for all subscribers on a
 * specified list
 *
 * @param $listid
 *  String containing the ID of the list, if blank subscribers for all lists
 *  will be returned
 * @param $status
 *  String representing the requested Status filter, either 'Active' or
 *  'Unsubscribed'. As the SDK only allows for filtering on one Property at a
 *  time the ListID takes precedence.
 * @return
 *  Array of objects representing list subscribers
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-subscriber-retrieve.htm
 */
function exact_target_api_get_list_subscribers($listid = '', $status = '') {
  $client = exact_target_api_get_client();
  $listsubscriber = new ET_List_Subscriber();
  $listsubscriber->authStub = $client;
  if (!empty($status)) {
    $listsubscriber->filter = array(
      'Property' => 'Status',
      'SimpleOperator' => 'equals',
      'Value' => $status,
    );
  }
  if (!empty($listid)) {
    $listsubscriber->filter = array(
      'Property' => 'ListID',
      'SimpleOperator' => 'equals',
      'Value' => $listid,
    );
  }
  $response = $listsubscriber->get();
  return $response->results;
}

/**
 * Get organizations within the ExactTarget account.
 *
 * @param $props
 *  Array of properties to return
 * @param $filter
 *  Array containing filter directives for the search
 *
 * @return
 *  ET_Get object containing results of Organizations request.
 */
function exact_target_api_get_organizations($props = array(), $filter = array()) {
  $client = exact_target_api_get_client();
  $org = new ET_Organization();
  $org->authStub = $client;
  if (!empty($props)) {
    $org->props = $props;
  }
  if (!empty(filter)) {
    $org->filter = $filter;
  }
  $response = $org->get();
  return $response;
}

/**
 * Get users with access to the ExactTarget account.
 *
 * @param $props
 *  Array of properties to return
 * @param $filter
 *  Array containing filter directives for the search
 *
 * @return
 *  ET_Get object containing results of Organizations request.
 */
function exact_target_api_get_users($props = array(), $filter = array()) {
  $client = exact_target_api_get_client();
  $user = new ET_User();
  $user->authStub = $client;
  if (!empty($props)) {
    $user->props = $props;
  }
  if (!empty(filter)) {
    $user->filter = $filter;
  }
  $response = $user->get();
  return $response;
}

/**
 * Returns information about subscribers currently on the Master Unsubscribe list.
 * Technically there is not a Master Unsubscribe list any more, all subscribers
 * are added to a list called 'All Subscribers'. in addition to any other list
 * they may be on. If a subscriber's status is changes to 'Unsubscribe' on the
 * 'All Subscribers' list then they are automatically Unsubscribed from all
 * lists. If the subscriber is not Active on the 'All Subscribers' list then
 * they cannot be subscribed to any list, or made 'Active' on any list until
 * they are changed to Status='Active' in the 'All Subscribers' list.
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-subscriber-retrieve.htm
 */
function exact_target_api_get_master_unsubscribe_list() {
  // The Master list is called 'All Subscribers'
  $query = db_select('et_list_cache', 'et');
  $query->addField('et', 'listid');
  $query->condition('list_name', 'All Subscribers');
  $result = $query->execute();
  $master_list_id = $result->fetchField();

  $client = exact_target_api_get_client();
  $listsubscriber = new ET_List_Subscriber();
  $listsubscriber->authStub = $client;
  // the SDK doesn't allow for multiple filters to be applied, just one
  $listsubscriber->filter = array(
    'Property' => 'Status',
    'SimpleOperator' => 'equals',
    'Value' => 'Unsubscribed',
  );
  $response = $listsubscriber->get();
  foreach ($response->results AS $key => $subscriber) {
    if ($subscriber->ListID != $master_list_id) {
      // strip out all the subscribers not in the master list
      unset($response->results[$key]);
    }
  }
  $response->results = array_values($response->results);
  return $response;
}

/**
 * Adds a subscriber to a list
 *
 * @param $listid
 *  the ID of the list
 * @param $email
 *  String containing the e-mail address to send e-mails to.
 * @return
 *  ET_Post object with request status information including errors
 * 
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/add-subscriber-to-list.htm
 */
function exact_target_api_add_subscriber($listid, $email) {

  $client = exact_target_api_get_client();
  $response = $client->AddSubscriberToList($email, array($listid), $email);
  return $response;
}

/**
 * Removes a subscriber from a single list, the user will not be completely
 * deleted and they will remain on the list, but their status will be changed to
 * 'Unsubscribed'.
 *
 * @param $listid
 *  String with the Id of the list
 * @param $email
 *  String with the email address to be removed from the list
 * @param $subkey
 *  String with the SubscriberKey for the user, If this is not provided the
 *  $email will be used to lookup the subscriber and get the SubscriberKey
 * @return
 *  ET_Patch object with results information.
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/subscriber-update.htm
 */
function exact_target_api_remove_subscriber($listid, $email, $subkey = NULL) {
  $client = exact_target_api_get_client();
  if (empty($subkey)) {
    // fetch the subscriber because we don't have the subkey
    $sub = exact_target_api_get_subscriber_by_email($email);
    $subkey = $sub->SubscriberKey;
  }


  $lists = array(
    'ID' => $listid,
    'Status' => 'Unsubscribed',
  );

  $subscriber = new ET_Subscriber();
  $subscriber->authStub = $client;
  $subscriber->props = array(
    'SubscriberKey' => $subkey,
    'Lists' => $lists,
  );
  $results = $subscriber->patch();

  return $results;
}

/**
 * Unsubscribe a user from all lists. The user still appears on the list but the
 * status is set to 'Unsubscribed'. This includes the "All Subscribers" list;
 * with the user on the "All Subscribers" list set to "Unsubscribed" the user
 * cannot be subscribed to any list until they are changed to "Active" on the
 * "All Subscribers" list.
 *
 * @param $email
 *  String of the email address to unsibsribe.
 * @return
 *  ET_Patch object with results information.
 */
function exact_target_api_unsubscribe_all($email) {
  $client = exact_target_api_get_client();
  $sub = exact_target_api_get_subscriber_by_email($email);

  $subscriber = new ET_Subscriber();
  $subscriber->authStub = $client;
  $subscriber->props = array(
    'SubscriberKey' => $sub->SubscriberKey,
    'Status' => 'Unsubscribed',
  );
  $results = $subscriber->patch();

  return $results;
}

/**
 * Deletes a subscriber entirely from your account.
 *
 *
 * @param $subscriber_key
 *  String containing the SubscriberKey returned in lists of subscribers. By
 *   default subscribers created by this module use the email address as the
 *   SubscriberKey
 * @return
 *  ET_Delete object containing errors and status codes
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/subscriber-delete.htm
 */
function exact_target_api_delete_subscriber($subscriber_key) {
  $client = exact_target_api_get_client();
  $subscriber = new ET_Subscriber();
  $subscriber->authStub = $client;
  $subscriber->props = array('SubscriberKey' => $subscriber_key);
  $results = $subscriber->delete();
  return $results;
}

/**
 * Updates attribute values and the status of an existing subscriber
 *
 * The Subscriber Edit (Update) call updates attribute values and the status
 * of an existing subscriber. This call can also be used to reactivate a
 * subscriber on the Master Unsubscribe list. You must provide the email
 * address and the listID or subscriberID if you are reactivating a
 * subscriber. The call returns a subscriberID for each subscriber successfully
 * updated.
 *
 * @param $email
 *  String representation of the user's email address
 * @param $props
 *  array of properties to set on the user account
 * @param $subkey
 *  String representation of the user's unique SubscriberKey. If this is left
 *  blank an extra API call will be made to look up the user's SubscriberKey
 *  using the email address provided
 * @return
 *  ET_Patch object with results information.
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/subscriber-update.htm
 */
function exact_target_api_update_subscriber($email, $props = array(), $subkey = NULL) {
  $client = exact_target_api_get_client();
  if (empty($subkey)) {
    // fetch the subscriber because we don't have the subkey
    $sub = exact_target_api_get_subscriber_by_email($email);
    $subkey = $sub->SubscriberKey;
  }
  $default_props = array(
    'SubscriberKey' => $subkey,
  );
  $subscriber = new ET_Subscriber();
  $subscriber->authStub = $client;
  $subscriber->props = array_merge($default_props, $props);
  $results = $subscriber->patch();
  return $results;
}

/**
 * Places one or more email addresses on your Master Unsubscribe list
 *
 * @see exact_target_api_unsubscribe_all().
 */
function exact_target_api_unsubscribe_master($email) {
  return exact_target_api_unsubscribe_all($email);
}

/**
 * Retrieves all profile and preference attribute values for a subscriber
 *
 * @param $id
 *  String of the key to search on, usually the e-mail address or subscriber key
 * @param $key
 *  String with name of property to search on for the ID, usually 'EmalAddress'
 *  or 'SubscriberKey'
 * @return
 *  Object with Subscriber information and a lists property containing an array
 *  of lists the user is (un)subscribed to
 *
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/subscriber-retrieve.htm
 * @see https://developer.salesforce.com/docs/atlas.en-us.mc-sdks.meta/mc-sdks/list-subscriber-retrieve.htm
 */
function exact_target_api_get_subscriber_by_id($id, $key = 'SubscriberKey') {
  $client = exact_target_api_get_client();
  $subscriber = new ET_Subscriber();
  $subscriber->authStub = $client;
  $subscriber->filter = array(
    'Property' => $key,
    'SimpleOperator' => 'equals',
    'Value' => $id,
  );
  $sub_response = $subscriber->get();
  $subscriber = $sub_response->results[0];
  $listsubscriber = new ET_List_Subscriber();
  $listsubscriber->authStub = $client;
  $listsubscriber->filter = array(
    'Property' => 'SubscriberKey',
    'SimpleOperator' => 'equals',
    'Value' => $subscriber->SubscriberKey,
  );
  $list_response = $listsubscriber->get();

  $subscriber->lists = array();
  foreach ($list_response->results AS $this_list) {
    $subscriber->lists[] = $this_list;
  }
  return $subscriber;
}

/**
 * Retrieves all profile and preference attribute values for a subscriber by
 * email address.
 *
 * @param $email
 *  String with the email address
 * @return
 *  Object with Subscriber information and a lists property containing an array
 *  of lists the user is (un)subscribed to
 *
 * @see exact_target_api_get_subscriber_by_id().
 */
function exact_target_api_get_subscriber_by_email($email) {
  return exact_target_api_get_subscriber_by_id($email, 'EmailAddress');
}

/**
 * Implements hook_libraries_info().
 */
function exact_target_api_libraries_info() {

  $libraries['FuelSDK-PHP'] = array(
    'name' => 'FuelSDK-PHP',
    'vendor url' => 'https://github.com/salesforce-marketingcloud/FuelSDK-PHP',
    'download url' => 'https://github.com/salesforce-marketingcloud/FuelSDK-PHP/archive/Dot9.zip',
    'version arguments' => array(
      'file'    => 'README.md',
      'pattern' => '/.*Version\s([.0-9]*).*/',
    ),
    'files' => array(
      'php' => array(
        'ET_Client.php',
        'xmlseclibs.php',
      ),
    ),
  );

  return $libraries;
}
